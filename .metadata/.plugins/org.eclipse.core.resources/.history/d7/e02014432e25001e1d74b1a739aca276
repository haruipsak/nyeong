package project;

import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

import org.apache.commons.beanutils.BeanUtils;

/**
 *  컨트롤로 기능:  사용자 요청을 받아 모델 과 연동하고 처리된 결과를
 *              뷰로 전달하는 역할을 수행하는 중요한 부분이다.
 */
@WebServlet("/board")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	private BoardDAO dao;
	private ServletContext ctx;
	
	// 웹 리소스 기본 경로 지정
	private final String START_PAGE = "project/community.jsp";
	

    public BoardController() {
        super();
    }


	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		dao = new BoardDAO();
		ctx = getServletContext();
	}


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//request.setCharacterEncoding("utf-8");
		String action = request.getParameter("action");

		Method m;
		String view = null;
		
		
		// action 파라미터 없이 접근한 경우
		if(action == null) {
			action = "listBoard";
		}
		
		try {
			
			m = this.getClass().getMethod(action, HttpServletRequest.class);
		
			// 메서드 실행 후 리턴값을 받아옴
			view = (String)m.invoke(this, request);
			
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
			view = START_PAGE;
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// POST 요청 처리후에는 리디렉션 방법으로 이동하게  분기 처리
		if(view.startsWith("redirect:/")) {
			//redirect/  문자열 이후 경로만 가지고 옴
			String rView = view.substring("redirect:/".length());
			response.sendRedirect(rView);
		} else {
			// 지정된 뷰로 포워딩
			RequestDispatcher dispatcher = request.getRequestDispatcher(view);
			dispatcher.forward(request, response);
		}
		
	}

	public String addBoard(HttpServletRequest request) {
		BoardDTO n = new BoardDTO();
		
		try {
			Part part = request.getPart("file");
			String fileName = getFilename(part);
			if(fileName != null && !fileName.isEmpty()) {
				part.write(fileName);
			}

			BeanUtils.populate(n, request.getParameterMap());

			dao.addBoard(n);
		} catch (Exception e) {
			e.printStackTrace();
			return listBoard(request);
		}
		
		return "redirect:/board?action=listBoard";
	}
	
	public String deleteBoard(HttpServletRequest request) {
		int aid = Integer.parseInt(request.getParameter("aid"));
		
		try {
			dao.delBoard(aid);
		} catch (SQLException e) {
			e.printStackTrace();
			return listBoard(request);
		}
		
		return "redirect:/board?action=listBoard";
	}


	public String listBoard(HttpServletRequest request) {
		List<BoardDTO> list;
		
		try {
			list = dao.getAll();
			request.setAttribute("list", list);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return "project/community.jsp";
	}
	
	public String getBoard(HttpServletRequest request) {
		int aid = Integer.parseInt(request.getParameter("aid"));
		
		BoardDTO n;
		
		try {
			n = dao.getBoard(aid);
			request.setAttribute("board", n);
		} catch (SQLException e) {
			e.printStackTrace();

		}	
		
		return "project/community.jsp";
	}

	private String getFilename(Part part) {
		String fileName = null;
		String header = part.getHeader("content-disposition");
		System.out.println("Header => " + header);
		
		//파일 이름이 들어있는 속성부분의 시작위치를 가져와 큰따옴표 사이의 값부분만 가지고 옴
		int start = header.indexOf("filename=");
		fileName = header.substring(start+10, header.length()-1);
		ctx.log("파일명: " + fileName);
		return fileName;
	}	
	
}
